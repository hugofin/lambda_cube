
@article{barendregt_introduction_1991,
	title = {Introduction to generalized type systems},
	volume = {1},
	issn = {0956-7968, 1469-7653},
	url = {https://www.cambridge.org/core/product/identifier/S0956796800020025/type/journal_article},
	doi = {10.1017/S0956796800020025},
	abstract = {Abstract
            
              Programming languages often come with type systems. Some of these are simple, others are sophisticated. As a stylistic representation of types in programming languages several versions of typed lambda calculus are studied. During the last 20 years many of these systems have appeared, so there is some need of classification. Working towards a taxonomy, Barendregt (1991) gives a fine-structure of the theory of constructions (Coquand and Huet 1988) in the form of a canonical cube of eight type systems ordered by inclusion. Berardi (1988) and Terlouw (1988) have independently generalized the method of constructing systems in the λ-cube. Moreover, Berardi (1988, 1990) showed that the generalized type systems are flexible enough to describe many logical systems. In that way the well-known
              propositions-as-types
              interpretation obtains a nice canonical form.},
	language = {en},
	number = {2},
	urldate = {2024-02-02},
	journal = {Journal of Functional Programming},
	author = {Barendregt, Henk},
	month = apr,
	year = {1991},
	pages = {125--154},
}

@misc{digital_accessibility,
	title = {University of {Glasgow} - {MyGlasgow} - {Digital} {Accessibility}},
	url = {https://www.gla.ac.uk/myglasgow/digitalaccessibility/#furtherinformationandresources},
	urldate = {2024-03-16},
}

@misc{wikipedia,
	title = {Wikipedia entry on the Lambda cube},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Lambda_cube&oldid=1201685608},
	abstract = {In mathematical logic and type theory, the λ-cube (also written lambda cube) is a framework introduced by Henk Barendregt to investigate the different dimensions in which the calculus of constructions is a generalization of the simply typed λ-calculus. Each dimension of the cube corresponds to a new kind of dependency between terms and types. Here, "dependency" refers to the capacity of a term or type to bind a term or type. The respective dimensions of the λ-cube correspond to:

x-axis (
  
    
      
        →
      
    
    \{{\textbackslash}displaystyle {\textbackslash}rightarrow \}
  ): types that can bind terms, corresponding to dependent types.
y-axis (
  
    
      
        ↑
      
    
    \{{\textbackslash}displaystyle {\textbackslash}uparrow \}
  ): terms that can bind types, corresponding to polymorphism.
z-axis (
  
    
      
        ↗
      
    
    \{{\textbackslash}displaystyle {\textbackslash}nearrow \}
  ): types that can bind types, corresponding to (binding) type operators.The different ways to combine these three dimensions yield the 8 vertices of the cube, each corresponding to a different kind of typed system. The λ-cube can be generalized into the concept of a pure type system.},
	language = {en},
	urldate = {2024-03-19},
	journal = {Wikipedia},
	month = feb,
	year = {2024},
	note = {Page Version ID: 1201685608},
}

@misc{youtube,
	title = {Lambda {Cube} {Unboxed} - {YouTube}},
    author = {Michelle Döring and Felix Moebius and Falk Schimweg}
	url = {https://www.youtube.com/playlist?list=PLNwzBl6BGLwOKBFVbvp-GFjAA_ESZ--q4&si=BarNq1ZzrwcKRQaD},
	urldate = {2024-03-19},
    year = {2021},
}

@misc{fowler_model-view-update-communicate:_2020,
	title = {Model-{View}-{Update}-{Communicate}: {Session} {Types} meet the {Elm} {Architecture}},
	shorttitle = {Model-{View}-{Update}-{Communicate}},
	url = {http://arxiv.org/abs/1910.11108},
	doi = {10.48550/arXiv.1910.11108},
	abstract = {Session types are a type discipline for communication channel endpoints which allow conformance to protocols to be checked statically. Safely implementing session types requires linearity, usually in the form of a linear type system. Unfortunately, linear typing is difficult to integrate with graphical user interfaces (GUIs), and to date most programs using session types are command line applications. In this paper, we propose the first principled integration of session typing and GUI development by building upon the Model-View-Update (MVU) architecture, pioneered by the Elm programming language. We introduce \${\textbackslash}lambda\_\{{\textbackslash}textsf\{MVU\}\}\$, the first formal model of the MVU architecture, and prove it sound. By extending \${\textbackslash}lambda\_\{{\textbackslash}textsf\{MVU\}\}\$ with {\textbackslash}emph\{commands\} as found in Elm, along with {\textbackslash}emph\{linearity\} and {\textbackslash}emph\{model transitions\}, we show the first formal integration of session typing and GUI programming. We implement our approach in the Links web programming language, and show examples including a two-factor authentication workflow and multi-room chat server.},
	urldate = {2024-03-19},
	publisher = {arXiv},
	author = {Fowler, Simon},
	month = may,
	year = {2020},
	note = {arXiv:1910.11108 [cs]},
	keywords = {Computer Science - Programming Languages},
}
@misc{accessible_inclusive,
	title = {University of {Glasgow} - {MyGlasgow} - {Academic} {Policy} \& {Governance} - {Policy}, {Strategy} and {Regulations} - {Student} {Support} - {Accessible} \& {Inclusive} {Learning} {Policy} - {AILP} {Policy}},
	url = {https://www.gla.ac.uk/myglasgow/apg/policies/studentsupport/ailp/policy/},
	urldate = {2024-03-19},
}

@book{tapl,
  author       = {Benjamin C. Pierce},
  title        = {Types and programming languages},
  publisher    = {{MIT} Press},
  year         = {2002},
  isbn         = {978-0-262-16209-8},
  timestamp    = {Thu, 03 Feb 2011 10:51:35 +0100},
  biburl       = {https://dblp.org/rec/books/daglib/0005958.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@misc{sculpt,
	title = {{SCULPT} for {Accessibility}},
	url = {https://gcs.civilservice.gov.uk/external-resources/sculpt-for-accessibility/},
	abstract = {SCULPT stands for Structure (use headings and styles), Colour and contrast, Use of images, Links (hyperlinks), Tables.},
	language = {en},
	urldate = {2024-03-20},
	journal = {GCS},
}

@article{props_as_types,
  author       = {Philip Wadler},
  title        = {Propositions as types},
  journal      = {Commun. {ACM}},
  volume       = {58},
  number       = {12},
  pages        = {75--84},
  year         = {2015},
  url          = {https://doi.org/10.1145/2699407},
  doi          = {10.1145/2699407},
  timestamp    = {Wed, 14 Nov 2018 10:22:36 +0100},
  biburl       = {https://dblp.org/rec/journals/cacm/Wadler15.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
