import katex from 'https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.mjs';
import { DOMParser } from "https://deno.land/x/deno_dom/deno-dom-wasm.ts";
import * as path from "https://deno.land/std@0.210.0/path/mod.ts";

function domToElm(node) {
    if (node.nodeType == 3) {
        // text node
        return `text "${node.textContent.replaceAll('\\', '\\\\').replaceAll("\n", "")}"`
    }

    if (node.nodeType == 1) {
        // normal node
        const children = [...node.childNodes].map(domToElm)

        const attribues = []

        for (let attr of node.getAttributeNames()) {
            attribues.push(`attribute "${attr}" "${node.getAttribute(attr)}"`)
        }

        return `node "${node.localName}" [ ${attribues.join(", ")} ] [ ${children.join(", ")} ]`
    }
}

function latex2elm(moduleName, latex) {
    let html;

    try {
        html = katex.renderToString(latex, {output: "html"})
    } catch (error) {
        console.error("[Error] " + error.rawMessage)
        return `text "error: ${error.rawMessage}"`
    }
    
    const parser = new DOMParser()

    const dom = parser.parseFromString(html, "text/html")

    const output = `
module MathML.${moduleName} exposing (view)

import Html exposing (math, text)
import VirtualDom exposing (nodeNS)
import Html.Attributes exposing (attribute)

-- this code was generated by latex2elm

node = nodeNS "http://www.w3.org/1998/Math/MathML"

view = math [Html.Attributes.attribute "display" "block"] [${domToElm(dom.body.children[0])}]
`

    return output
}


const infile = Deno.args[0]

let moduleName = path.parse(infile).name

const latex = await Deno.readTextFile(infile);

const elm = latex2elm(moduleName, latex)

await Deno.writeTextFile("gen/MathML/" + moduleName + ".elm", elm)